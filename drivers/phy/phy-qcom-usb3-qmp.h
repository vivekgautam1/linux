/*
 * Copyright (c) 2016, Linux Foundation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef QCOM_USB3_PIPE_H_
#define QCOM_USB3_PIPE_H_

/* QCOM UFS PHY control registers */
#define COM_OFF(x)	(0x000 + x)
#define TX_OFF(x)	(0x200 + x)
#define RX_OFF(x)	(0x400 + x)
#define PHY_OFF(x)	(0x600 + x)

/* UFS PHY QSERDES COM registers */
#define QSERDES_COM_BG_TIMER				COM_OFF(0x0C)
#define QSERDES_COM_SSC_EN_CENTER			COM_OFF(0x10)
#define QSERDES_COM_SSC_ADJ_PER1			COM_OFF(0x14)
#define QSERDES_COM_SSC_ADJ_PER2			COM_OFF(0x18)
#define QSERDES_COM_SSC_PER1				COM_OFF(0x1C)
#define QSERDES_COM_SSC_PER2				COM_OFF(0x20)
#define QSERDES_COM_SSC_STEP_SIZE1			COM_OFF(0x24)
#define QSERDES_COM_SSC_STEP_SIZE2			COM_OFF(0x28)
#define QSERDES_COM_BIAS_EN_CLKBUFLR_EN			COM_OFF(0x34)
#define QSERDES_COM_SYS_CLK_CTRL			COM_OFF(0x3C)
#define QSERDES_COM_PLL_IVCO				COM_OFF(0x48)
#define QSERDES_COM_LOCK_CMP1_MODE0			COM_OFF(0x4C)
#define QSERDES_COM_LOCK_CMP2_MODE0			COM_OFF(0x50)
#define QSERDES_COM_LOCK_CMP3_MODE0			COM_OFF(0x54)
#define QSERDES_COM_LOCK_CMP1_MODE1			COM_OFF(0x58)
#define QSERDES_COM_LOCK_CMP2_MODE1			COM_OFF(0x5C)
#define QSERDES_COM_LOCK_CMP3_MODE1			COM_OFF(0x60)
#define QSERDES_COM_BG_TRIM				COM_OFF(0x70)
#define QSERDES_COM_CP_CTRL_MODE0			COM_OFF(0x78)
#define QSERDES_COM_CP_CTRL_MODE1			COM_OFF(0x7C)
#define QSERDES_COM_PLL_RCTRL_MODE0			COM_OFF(0x84)
#define QSERDES_COM_PLL_RCTRL_MODE1			COM_OFF(0x88)
#define QSERDES_COM_PLL_CCTRL_MODE0			COM_OFF(0x90)
#define QSERDES_COM_PLL_CCTRL_MODE1			COM_OFF(0x94)
#define QSERDES_COM_SYSCLK_EN_SEL			COM_OFF(0xAC)
#define QSERDES_COM_RESETSM_CNTRL			COM_OFF(0xB4)
#define QSERDES_COM_LOCK_CMP_EN				COM_OFF(0xC8)
#define QSERDES_COM_LOCK_CMP_CFG			COM_OFF(0xCC)
#define QSERDES_COM_DEC_START_MODE0			COM_OFF(0xD0)
#define QSERDES_COM_DEC_START_MODE1			COM_OFF(0xD4)
#define QSERDES_COM_DIV_FRAC_START1_MODE0		COM_OFF(0xDC)
#define QSERDES_COM_DIV_FRAC_START2_MODE0		COM_OFF(0xE0)
#define QSERDES_COM_DIV_FRAC_START3_MODE0		COM_OFF(0xE4)
#define QSERDES_COM_DIV_FRAC_START1_MODE1		COM_OFF(0xE8)
#define QSERDES_COM_DIV_FRAC_START2_MODE1		COM_OFF(0xEC)
#define QSERDES_COM_DIV_FRAC_START3_MODE1		COM_OFF(0xF0)
#define QSERDES_COM_INTEGLOOP_GAIN0_MODE0		COM_OFF(0x108)
#define QSERDES_COM_INTEGLOOP_GAIN1_MODE0		COM_OFF(0x10C)
#define QSERDES_COM_INTEGLOOP_GAIN0_MODE1		COM_OFF(0x110)
#define QSERDES_COM_INTEGLOOP_GAIN1_MODE1		COM_OFF(0x114)
#define QSERDES_COM_VCO_TUNE_CTRL			COM_OFF(0x124)
#define QSERDES_COM_VCO_TUNE_MAP			COM_OFF(0x128)
#define QSERDES_COM_VCO_TUNE1_MODE0			COM_OFF(0x12C)
#define QSERDES_COM_VCO_TUNE2_MODE0			COM_OFF(0x130)
#define QSERDES_COM_VCO_TUNE1_MODE1			COM_OFF(0x134)
#define QSERDES_COM_VCO_TUNE2_MODE1			COM_OFF(0x138)
#define QSERDES_COM_VCO_TUNE_TIMER1			COM_OFF(0x144)
#define QSERDES_COM_VCO_TUNE_TIMER2			COM_OFF(0x148)
#define QSERDES_COM_CLK_SELECT				COM_OFF(0x174)
#define QSERDES_COM_HSCLK_SEL				COM_OFF(0x178)
#define QSERDES_COM_CORECLK_DIV				COM_OFF(0x184)
#define QSERDES_COM_CORE_CLK_EN				COM_OFF(0x18C)
#define QSERDES_COM_CMN_CONFIG				COM_OFF(0x194)
#define QSERDES_COM_SVS_MODE_CLK_SEL			COM_OFF(0x19C)
#define QSERDES_COM_CORECLK_DIV_MODE1			COM_OFF(0x1BC)

/* UFS PHY TX registers */
#define QSERDES_TX_HIGHZ_TRANSCEIVEREN_BIAS_DRVR_EN	TX_OFF(0x68)
#define QSERDES_TX_LANE_MODE				TX_OFF(0x94)
#define QSERDES_TX_RCV_DETECT_LVL_2			TX_OFF(0xAC)

/* UFS PHY RX registers */
#define QSERDES_RX_UCDR_SO_GAIN				RX_OFF(0x1C)
#define QSERDES_RX_UCDR_FASTLOCK_FO_GAIN		RX_OFF(0x40)
#define QSERDES_RX_RX_TERM_BW				RX_OFF(0x90)
#define QSERDES_RX_RX_EQ_GAIN1_LSB			RX_OFF(0xC4)
#define QSERDES_RX_RX_EQ_GAIN1_MSB			RX_OFF(0xC8)
#define QSERDES_RX_RX_EQ_GAIN2_LSB			RX_OFF(0xCC)
#define QSERDES_RX_RX_EQ_GAIN2_MSB			RX_OFF(0xD0)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL2		RX_OFF(0xD8)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL3		RX_OFF(0xDC)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL4		RX_OFF(0xE0)
#define QSERDES_RX_RX_EQ_OFFSET_ADAPTOR_CNTRL1		RX_OFF(0x108)
#define QSERDES_RX_RX_OFFSET_ADAPTOR_CNTRL2		RX_OFF(0x10C)
#define QSERDES_RX_SIGDET_CNTRL				RX_OFF(0x114)
#define QSERDES_RX_SIGDET_LVL				RX_OFF(0x118)
#define QSERDES_RX_SIGDET_DEGLITCH_CNTRL		RX_OFF(0x11C)
#define QSERDES_RX_RX_INTERFACE_MODE			RX_OFF(0x12C)

/* USB PHY PCS registers */
#define USB3_PHY_SW_RESET				PHY_OFF(0x0)
#define USB3_PHY_POWER_DOWN_CONTROL			PHY_OFF(0x4)
#define USB3_PHY_START_CTRL				PHY_OFF(0x8)
#define USB3_PHY_POWER_STATE_CONFIG2			PHY_OFF(0x64)
#define USB3_PHY_LOCK_DETECT_CONFIG1			PHY_OFF(0x80)
#define USB3_PHY_LOCK_DETECT_CONFIG2			PHY_OFF(0x84)
#define USB3_PHY_LOCK_DETECT_CONFIG3			PHY_OFF(0x88)
#define USB3_PHY_FLL_CNTRL1				PHY_OFF(0xC0)
#define USB3_PHY_FLL_CNTRL2				PHY_OFF(0xC4)
#define USB3_PHY_FLL_CNT_VAL_L				PHY_OFF(0xC8)
#define USB3_PHY_FLL_CNT_VAL_H_TOL			PHY_OFF(0xCC)
#define USB3_PHY_FLL_MAN_CODE				PHY_OFF(0xD0)
#define USB3_PHY_PCS_READY_STATUS			PHY_OFF(0x17C)

/* USB3PHY_USB3_PHY_SW_RESET bit */
#define PHY_SW_RESET				BIT(0)
/* USB3PHY_USB3_PHY_POWER_DOWN_CONTROL */
#define PHY_SW_PWRDN_B				BIT(0)
/* USB3PHY_USB3_PHY_START_CONTROL bits */
#define PHY_SERDES_START			BIT(0)
#define PHY_PCS_START				BIT(1)
/* USB3PHY_USB3_PHY_PCS_STATUS bit */
#define MASK_PHYSTATUS				BIT(6)

#define VDDA_PHY_MIN_UV		950000	/* uV */
#define VDDA_PHY_MAX_UV		950000	/* uV */
#define VDDA_PLL_1P8_MIN_UV	1800000	/* uV */
#define VDDA_PLL_1P8_MAX_UV	1800000	/* uV */

#define INIT_MAX_TIME_USEC	1000
#define MAX_PROP_NAME		32

#define QCOM_SSPHY_QMP_CONFIG(reg, val) \
	{				\
		.reg_offset = reg,	\
		.cfg_value = val,	\
	}
struct qcom_usb3phy_qmp_config {
	u32 reg_offset;
	u32 cfg_value;
};

static struct qcom_usb3phy_qmp_config phy_init_config_tbl[] = {
	/* Common block settings */
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SYSCLK_EN_SEL, 0x14),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_BIAS_EN_CLKBUFLR_EN, 0x08),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_CLK_SELECT, 0x30),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_CMN_CONFIG, 0x06),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SVS_MODE_CLK_SEL, 0x01),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_HSCLK_SEL, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_BG_TRIM, 0x0F),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_PLL_IVCO, 0x0F),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SYS_CLK_CTRL, 0x04),

	/* PLL and Loop filter settings */
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_DEC_START_MODE0, 0x82),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_DIV_FRAC_START1_MODE0, 0x55),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_DIV_FRAC_START2_MODE0, 0x55),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_DIV_FRAC_START3_MODE0, 0x03),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_CP_CTRL_MODE0, 0x0B),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_PLL_RCTRL_MODE0, 0x16),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_PLL_CCTRL_MODE0, 0x28),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_INTEGLOOP_GAIN0_MODE0, 0x80),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_VCO_TUNE_CTRL, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_LOCK_CMP1_MODE0, 0x15),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_LOCK_CMP2_MODE0, 0x34),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_LOCK_CMP3_MODE0, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_CORE_CLK_EN, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_LOCK_CMP_CFG, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_VCO_TUNE_MAP, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_BG_TIMER, 0x0A),

	/* SSC settings */
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_EN_CENTER, 0x01),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_PER1, 0x31),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_PER2, 0x01),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_ADJ_PER1, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_ADJ_PER2, 0x00),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_STEP_SIZE1, 0xDE),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_COM_SSC_STEP_SIZE2, 0x07),

	/* Rx settings */
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_UCDR_FASTLOCK_FO_GAIN, 0x0B),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_UCDR_SO_GAIN, 0x04),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_RX_EQU_ADAPTOR_CNTRL2, 0x02),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_RX_EQU_ADAPTOR_CNTRL3, 0x4C),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_RX_EQU_ADAPTOR_CNTRL4, 0xBB),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_RX_EQ_OFFSET_ADAPTOR_CNTRL1, 0x77),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_RX_OFFSET_ADAPTOR_CNTRL2, 0x80),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_SIGDET_CNTRL, 0x03),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_SIGDET_LVL, 0x18),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_RX_SIGDET_DEGLITCH_CNTRL, 0x16),

	/* TX settings */
	QCOM_SSPHY_QMP_CONFIG(QSERDES_TX_HIGHZ_TRANSCEIVEREN_BIAS_DRVR_EN, 0x45),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_TX_RCV_DETECT_LVL_2, 0x12),
	QCOM_SSPHY_QMP_CONFIG(QSERDES_TX_LANE_MODE, 0x06),

	/* FLL settings */
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_FLL_CNTRL2, 0x03),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_FLL_CNTRL1, 0x02),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_FLL_CNT_VAL_L, 0x09),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_FLL_CNT_VAL_H_TOL, 0x42),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_FLL_MAN_CODE, 0x85),

	/* Lock Det settings */
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_LOCK_DETECT_CONFIG1, 0xD1),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_LOCK_DETECT_CONFIG2, 0x1F),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_LOCK_DETECT_CONFIG3, 0x47),
	QCOM_SSPHY_QMP_CONFIG(USB3_PHY_POWER_STATE_CONFIG2, 0x08),
};

/**
 * struct qcom_usb3phy_qmp: main structure holding USB3 QMP PHY attributes.
 * @phy: pointer to generic phy.
 * @base: pointer to iomapped PHY memory space.
 * @vdda_phy: vdd supply to the PHY core block.
 * @vdda_pll_1p8: 1.8V vdd supply to ref_clk block.
 * @vdd_volt_range: array representing min-max volt range for vdd_phy.
 * @aux_clk: pointer to clock to PCS.
 * @cfg_ahb_clk: pointer to AHB2PHY interface.
 * @pipe_clk: generated by SS-PHY PLL for SS-link.
 * @ref_clk: pointer to reference clock.
 * @ref_clk_src: pointer to source to reference clock.
 * @phy_reset: Pointer to USB3 PHY CSR reset control.
 * @phy_phy_reset: Pointer to USB3 PHY core reset control.
 * @clk_enabled: check if clocks are enabled or not.
 */
struct qcom_usb3phy_qmp {
	struct phy		*phy;
	void __iomem		*base;

	struct regulator 	*vdda_phy;
	struct regulator 	*vdda_pll_1p8;

	struct clk		*aux_clk;
	struct clk		*cfg_ahb_clk;
	struct clk		*pipe_clk;
	struct clk		*ref_clk;
	struct clk		*ref_clk_src;
	struct reset_control	*phy_reset;
	struct reset_control	*phy_phy_reset;
	bool			clk_enabled;
};

#endif /* QCOM_USB3_PIPE_H_ */
